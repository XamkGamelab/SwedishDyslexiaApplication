//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/Input/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SwedishApp.Input
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Input/InputMap.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @InputMap: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @InputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""AppControls"",
            ""id"": ""183d2fd7-1b08-4729-b8c3-9d694c3fc3e9"",
            ""actions"": [
                {
                    ""name"": ""TabAction"",
                    ""type"": ""Button"",
                    ""id"": ""bfbfbbf0-8492-4ab9-8bd0-fcb620605359"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterAction"",
                    ""type"": ""Button"",
                    ""id"": ""a1b0bfa9-58b8-429c-ad49-a570145621c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAction"",
                    ""type"": ""Button"",
                    ""id"": ""934195a1-b0ac-4ac1-88eb-d6b9ae47b736"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAction"",
                    ""type"": ""Button"",
                    ""id"": ""45e40b84-7881-437a-917f-7ee07496ec48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9c88971-8e36-44bf-8483-d77be7006e4d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TabAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50d3b9c9-f313-476a-adaf-9285e5f6c1e1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e722b859-1641-4d19-ae80-f23a007e9970"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86fb666b-f23e-42f9-93ab-7a4189c8c255"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // AppControls
            m_AppControls = asset.FindActionMap("AppControls", throwIfNotFound: true);
            m_AppControls_TabAction = m_AppControls.FindAction("TabAction", throwIfNotFound: true);
            m_AppControls_EnterAction = m_AppControls.FindAction("EnterAction", throwIfNotFound: true);
            m_AppControls_LeftAction = m_AppControls.FindAction("LeftAction", throwIfNotFound: true);
            m_AppControls_RightAction = m_AppControls.FindAction("RightAction", throwIfNotFound: true);
        }

        ~@InputMap()
        {
            UnityEngine.Debug.Assert(!m_AppControls.enabled, "This will cause a leak and performance issues, InputMap.AppControls.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // AppControls
        private readonly InputActionMap m_AppControls;
        private List<IAppControlsActions> m_AppControlsActionsCallbackInterfaces = new List<IAppControlsActions>();
        private readonly InputAction m_AppControls_TabAction;
        private readonly InputAction m_AppControls_EnterAction;
        private readonly InputAction m_AppControls_LeftAction;
        private readonly InputAction m_AppControls_RightAction;
        /// <summary>
        /// Provides access to input actions defined in input action map "AppControls".
        /// </summary>
        public struct AppControlsActions
        {
            private @InputMap m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public AppControlsActions(@InputMap wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "AppControls/TabAction".
            /// </summary>
            public InputAction @TabAction => m_Wrapper.m_AppControls_TabAction;
            /// <summary>
            /// Provides access to the underlying input action "AppControls/EnterAction".
            /// </summary>
            public InputAction @EnterAction => m_Wrapper.m_AppControls_EnterAction;
            /// <summary>
            /// Provides access to the underlying input action "AppControls/LeftAction".
            /// </summary>
            public InputAction @LeftAction => m_Wrapper.m_AppControls_LeftAction;
            /// <summary>
            /// Provides access to the underlying input action "AppControls/RightAction".
            /// </summary>
            public InputAction @RightAction => m_Wrapper.m_AppControls_RightAction;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_AppControls; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="AppControlsActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(AppControlsActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="AppControlsActions" />
            public void AddCallbacks(IAppControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_AppControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AppControlsActionsCallbackInterfaces.Add(instance);
                @TabAction.started += instance.OnTabAction;
                @TabAction.performed += instance.OnTabAction;
                @TabAction.canceled += instance.OnTabAction;
                @EnterAction.started += instance.OnEnterAction;
                @EnterAction.performed += instance.OnEnterAction;
                @EnterAction.canceled += instance.OnEnterAction;
                @LeftAction.started += instance.OnLeftAction;
                @LeftAction.performed += instance.OnLeftAction;
                @LeftAction.canceled += instance.OnLeftAction;
                @RightAction.started += instance.OnRightAction;
                @RightAction.performed += instance.OnRightAction;
                @RightAction.canceled += instance.OnRightAction;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="AppControlsActions" />
            private void UnregisterCallbacks(IAppControlsActions instance)
            {
                @TabAction.started -= instance.OnTabAction;
                @TabAction.performed -= instance.OnTabAction;
                @TabAction.canceled -= instance.OnTabAction;
                @EnterAction.started -= instance.OnEnterAction;
                @EnterAction.performed -= instance.OnEnterAction;
                @EnterAction.canceled -= instance.OnEnterAction;
                @LeftAction.started -= instance.OnLeftAction;
                @LeftAction.performed -= instance.OnLeftAction;
                @LeftAction.canceled -= instance.OnLeftAction;
                @RightAction.started -= instance.OnRightAction;
                @RightAction.performed -= instance.OnRightAction;
                @RightAction.canceled -= instance.OnRightAction;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="AppControlsActions.UnregisterCallbacks(IAppControlsActions)" />.
            /// </summary>
            /// <seealso cref="AppControlsActions.UnregisterCallbacks(IAppControlsActions)" />
            public void RemoveCallbacks(IAppControlsActions instance)
            {
                if (m_Wrapper.m_AppControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="AppControlsActions.AddCallbacks(IAppControlsActions)" />
            /// <seealso cref="AppControlsActions.RemoveCallbacks(IAppControlsActions)" />
            /// <seealso cref="AppControlsActions.UnregisterCallbacks(IAppControlsActions)" />
            public void SetCallbacks(IAppControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_AppControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AppControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="AppControlsActions" /> instance referencing this action map.
        /// </summary>
        public AppControlsActions @AppControls => new AppControlsActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "AppControls" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="AppControlsActions.AddCallbacks(IAppControlsActions)" />
        /// <seealso cref="AppControlsActions.RemoveCallbacks(IAppControlsActions)" />
        public interface IAppControlsActions
        {
            /// <summary>
            /// Method invoked when associated input action "TabAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTabAction(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "EnterAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnEnterAction(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "LeftAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLeftAction(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "RightAction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRightAction(InputAction.CallbackContext context);
        }
    }
}
